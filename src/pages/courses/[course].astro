---
import BlogCourses from "@/components/blog/BlogCourses.astro";
import BlogsSimple from "@/components/Blogs-Simple.astro";
import PageHeader from "@/components/PageHeader.astro";
import Shape from "@/components/Shape.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";
import taxonomyFilter from "@/lib/utils/taxonomyFilter";
import { slugify, humanize } from "@/lib/utils/textConverter";
import courseInfo from "@/data/course-info.json";

export async function getStaticPaths() {
  const courses = await getTaxonomy(config.settings.blog_folder, "courses");
  return courses.map((item) => {
    const course = slugify(item);
    return {
      params: { course },
      props: { item },
    };
  });
}

const { course } = Astro.params;
const { item } = Astro.props;

const posts = await getSinglePage(config.settings.blog_folder);
const filterByTags = taxonomyFilter(posts, "courses", course);
const courseData = courseInfo[course];
---

<Base title={courseData.title || (course as string)}>
  <Shape />
  
  <!-- Hero Section with Gradient Overlay -->
  <section class="relative min-h-[500px] flex items-center py-20">
    <div class="absolute inset-0 overflow-hidden">
      <img 
        src={courseData.image || "/images/collaboration.png"} 
        alt={courseData.title} 
        class="w-full h-full object-cover"
      />
      <div class="absolute inset-0 bg-gradient-to-r from-black/80 to-black/40"></div>
    </div>
    
    <div class="container relative z-10">
      <div class="max-w-3xl mx-auto text-center text-white">
        <span class="inline-block px-4 py-1 bg-[#fb7299] rounded-full text-sm font-medium mb-4">
          {courseData.category || "Course"}
        </span>
        <h1 class="text-4xl md:text-5xl font-bold mb-6 text-white">
          {courseData.title}
        </h1>
        <p class="text-lg text-gray-200 mb-8">
          {courseData.description}
        </p>
        {courseData.startLink && (
          <a 
            href={courseData.startLink}
            class="inline-block bg-[#fb7299] hover:bg-[#e85c83] transition-colors px-8 py-3 rounded-lg font-semibold"
          >
            Start Learning
          </a>
        )}
      </div>
    </div>
  </section>

  <!-- Course Content Section -->
  <section class="py-16 bg-gray-50">
    <div class="container max-w-4xl">
      <h2 class="text-3xl font-bold text-center mb-12">Course Content</h2>
      
      <div class="space-y-4">
        {courseData.navbar.map((section: any, index: number) => (
          <div class="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden">
            <button
              class="w-full flex items-center justify-between p-4 hover:bg-gray-50 transition-colors cursor-pointer group"
              data-toggle={`section-${index}`}
            >
              <div class="flex items-center gap-3">
                <span class="flex items-center justify-center w-8 h-8 rounded-full bg-[#fb7299]/10 text-[#fb7299] font-medium">
                  {index + 1}
                </span>
                <h3 class="font-semibold text-gray-900 group-hover:text-[#fb7299] transition-colors">
                  {section.subheading}
                </h3>
              </div>
              <svg 
                class="w-5 h-5 text-gray-400 transform transition-transform duration-200" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            <div id={`section-${index}`} class="hidden border-t border-gray-100">
              <div class="p-4 space-y-2">
                {section.link.map((link: any) => (
                  <a 
                    href={link.type === "youtube" ? link.url : `/blog/${link.url}`}
                    target={link.type === "youtube" ? "_blank" : "_self"}
                    class="flex items-center gap-3 p-2 rounded-md hover:bg-gray-50 transition-colors group"
                  >
                    {link.type === "youtube" ? (
                      <svg class="w-5 h-5 text-red-600" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"/>
                      </svg>
                    ) : (
                      <svg class="w-5 h-5 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                    )}
                    <span class="text-gray-700 group-hover:text-[#fb7299] transition-colors">
                      {link.title}
                    </span>
                  </a>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <script is:inline>
    // Toggle section visibility
    document.querySelectorAll('[data-toggle]').forEach(button => {
      button.addEventListener('click', () => {
        const sectionId = button.getAttribute('data-toggle');
        const content = document.getElementById(sectionId);
        const icon = button.querySelector('svg');
        
        if (content?.classList.contains('hidden')) {
          content.classList.remove('hidden');
          icon?.classList.add('rotate-180');
        } else {
          content?.classList.add('hidden');
          icon?.classList.remove('rotate-180');
        }
      });
    });
  </script>
</Base>