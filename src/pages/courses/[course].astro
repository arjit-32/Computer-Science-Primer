---
import BlogCourses from "@/components/blog/BlogCourses.astro";
import BlogsSimple from "@/components/Blogs-Simple.astro";
import PageHeader from "@/components/PageHeader.astro";
import Shape from "@/components/Shape.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";
import taxonomyFilter from "@/lib/utils/taxonomyFilter";
import { slugify, humanize } from "@/lib/utils/textConverter";
import courseInfo from "@/data/course-info.json";

export async function getStaticPaths() {
  const courses = await getTaxonomy(config.settings.blog_folder, "courses");
  return courses.map((item) => {
    const course = slugify(item);
    return {
      params: { course },
      props: { item },
    };
  });
}

const { course } = Astro.params;
const { item } = Astro.props;

const posts = await getSinglePage(config.settings.blog_folder);
const filterByTags = taxonomyFilter(posts, "courses", course);
const courseData = courseInfo[course];
---

<Base title={courseData.title || (course as string)}>
  <Shape />
  
  <!-- Hero Section with Gradient Overlay -->
  <section class="relative min-h-[500px] flex items-center py-20">
    <div class="absolute inset-0 overflow-hidden">
      <img 
        src={courseData.image || "/images/collaboration.png"} 
        alt={courseData.title} 
        class="w-full h-full object-cover"
      />
      <div class="absolute inset-0 bg-gradient-to-r from-black/80 to-black/40"></div>
    </div>
    
    <div class="container relative z-10">
      <div class="max-w-3xl mx-auto text-center text-white">
        <span class="inline-block px-4 py-1 bg-[#fb7299] rounded-full text-sm font-medium mb-4">
          {courseData.category || "Course"}
        </span>
        <h1 class="text-4xl md:text-5xl font-bold mb-6 text-white">
          {courseData.title}
        </h1>
        <p class="text-lg text-gray-200 mb-8">
          {courseData.description}
        </p>
        {courseData.startLink && (
          <a 
            href={courseData.startLink}
            class="inline-block bg-[#fb7299] hover:bg-[#e85c83] transition-colors px-8 py-3 rounded-lg font-semibold"
          >
            Start Learning
          </a>
        )}
      </div>
    </div>
  </section>

  <!-- Course Content Section -->
  <section class="py-16 bg-gray-50">
    <div class="container max-w-4xl">
      <h2 class="text-3xl font-bold text-center mb-12">Course Content</h2>
      
      <div class="space-y-4">
        {courseData.navbar.map((section: any, index: number) => (
          <div class="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden">
            <button
              class="w-full flex items-center justify-between p-4 hover:bg-gray-50 transition-colors cursor-pointer group"
              data-toggle={`section-${index}`}
            >
              <div class="flex items-center gap-3">
                <span class="flex items-center justify-center w-8 h-8 rounded-full bg-[#fb7299]/10 text-[#fb7299] font-medium">
                  {index + 1}
                </span>
                <h3 class="font-semibold text-gray-900 group-hover:text-[#fb7299] transition-colors">
                  {section.subheading}
                </h3>
              </div>
              <svg 
                class="w-5 h-5 text-gray-400 transform transition-transform duration-200" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            <div id={`section-${index}`} class="hidden border-t border-gray-100">
              <div class="p-4 space-y-2">
                {section.link.map((link: any) => {
                  const isExternal = link.type === "external" || link.type === "course" || link.type === "external-blog";
                  return (
                    <a 
                      href={isExternal || link.type === "youtube" ? link.url : `/blog/${link.url}`}
                      target={isExternal || link.type === "youtube" ? "_blank" : "_self"}
                      class="flex items-center gap-3 p-2 rounded-md hover:bg-gray-50 transition-colors group"
                    >
                      {/* Icon selection based on link type */}
                      {link.type === "youtube" ? (
                        <svg class="w-5 h-5 text-red-600" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"/>
                        </svg>
                      ) : link.type === "external" ? (
                        <svg class="w-5 h-5 text-blue-500" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                        </svg>
                      ) : link.type === "course" ? (
                        <svg class="w-5 h-5 text-green-500" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                        </svg>
                      ) : link.type === "external-blog" ? (
                        <svg class="w-5 h-5 text-purple-500" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
                        </svg>
                      ) : link.type === "assignment" ? (
                        <svg class="w-5 h-5 text-orange-500" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                        </svg>
                      ) : link.type === "github" ? (
                        <svg class="w-5 h-5 text-gray-900" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                        </svg>
                      ) : (
                        <svg class="w-5 h-5 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      )}
                      <span class="text-gray-700 group-hover:text-[#fb7299] transition-colors">
                        {link.title}
                      </span>
                      {(isExternal || link.type === "youtube") && (
                        <svg class="w-4 h-4 text-gray-400 ml-1" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                        </svg>
                      )}
                    </a>
                  );
                })}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <script is:inline>
    // Toggle section visibility
    document.querySelectorAll('[data-toggle]').forEach(button => {
      button.addEventListener('click', () => {
        const sectionId = button.getAttribute('data-toggle');
        const content = document.getElementById(sectionId);
        const icon = button.querySelector('svg');
        
        if (content?.classList.contains('hidden')) {
          content.classList.remove('hidden');
          icon?.classList.add('rotate-180');
        } else {
          content?.classList.add('hidden');
          icon?.classList.remove('rotate-180');
        }
      });
    });
  </script>
</Base>