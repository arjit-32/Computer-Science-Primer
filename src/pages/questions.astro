---
import Code from 'astro/components/Code.astro';
import questions from '../data/questions.json';
import type { BundledLanguage } from "shiki";
import Base from '@/layouts/Base.astro';

const allTags = questions.reduce((tags, question) => {
  question.tags.forEach(tag => tags.add(tag));
  return tags;
}, new Set());

const uniqueTags = Array.from(allTags);
---

<Base>
  <section class="py-4 bg-gradient-to-br from-white via-pink-50 to-yellow-50">
    <div class="container mx-auto px-4">
      <h2 class="text-2xl md:text-3xl font-bold text-center mb-10 text-zinc-900">Dev Bytes</h2>
      

      <!-- Grid Layout: Left - Filters | Right - Questions -->
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-10">
        <!-- Filter Pills (Left) -->
        <div class="space-y-3 lg:col-span-1">
          <button 
            class="filter-btn w-full flex items-center bg-pink-100 rounded-lg p-3 text-left hover:bg-pink-200 transition font-medium justify-between"
            onclick="filterQuestions('')"
            data-tag="">
            All Questions
          </button>
          {uniqueTags.map((tag) => (
            <button 
              class="filter-btn w-full flex items-center bg-pink-50 rounded-lg p-3 text-left hover:bg-pink-100 transition capitalize font-medium justify-between"
              onclick={`filterQuestions('${tag}')`}
              data-tag={tag}>
              {tag}
            </button>
          ))}
        </div>

        <!-- Questions List (Right) -->
        <div class="lg:col-span-3 space-y-8" id="questionsGrid">
          {questions.map((question, index) => (
            <div 
              class="question-card bg-gradient-to-br from-white to-gray-50 rounded-xl shadow-sm hover:shadow-md transition-all duration-300 border border-gray-100 transform hover:-translate-y-1"
              data-tags={question.tags.join(',')}>
              <div class="p-6 sm:p-6">
                <div class="flex items-start gap-4">
                  <div class="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-[#fa729a] to-[#fddc43] rounded-full flex items-center justify-center text-white font-semibold">
                    {index + 1}
                  </div>
                  <div class="flex-1">
                    <h2 class="text-lg font-semibold text-gray-900 mb-3 hover:text-[#fa729a] transition-colors duration-300">
                      {question.question}
                    </h2>

                    <div class="prose prose-sm max-w-none text-gray-600 mb-4">
                      {question.answer.map((line) => (
                        <p class="mb-2">{line}</p>
                      ))}
                    </div>

                    {question.code && (
                      <Code code={question.code} lang={question.language as BundledLanguage || "javascript"} />
                    )}

                    {(question.images ?? []).length > 0 && (
                      <div class="mt-4 space-y-3">
                        {question.images.map((img) => (
                          <img 
                            src={img} 
                            alt="Question illustration" 
                            class="rounded-lg w-full h-auto object-cover shadow-sm transition-transform duration-300 hover:scale-[1.02]"
                          />
                        ))}
                      </div>
                    )}

                    <div class="mt-4 flex flex-wrap gap-2">
                      {question.tags.map((tag) => (
                        <span class="px-3 py-1 bg-gradient-to-r from-[#fddc43] to-yellow-200 text-black text-xs rounded-full capitalize font-medium">
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    function filterQuestions(tag) {
      const questions = document.querySelectorAll('.question-card');
      const buttons = document.querySelectorAll('.filter-btn');

      buttons.forEach(btn => {
        const isActive = btn.getAttribute('data-tag') === tag;
        btn.classList.toggle('bg-pink-300', isActive);
        btn.classList.toggle('text-white', isActive);
        btn.classList.toggle('bg-pink-50', !isActive);
        btn.classList.toggle('text-gray-700', !isActive);
      });

      questions.forEach((question) => {
        const tags = question.getAttribute('data-tags').split(',');
        const shouldShow = !tag || tags.includes(tag);
        
        if (shouldShow) {
          question.style.display = 'block';
          setTimeout(() => {
            question.style.opacity = '1';
            question.style.transform = 'translateY(0)';
          }, 50);
        } else {
          question.style.opacity = '0';
          question.style.transform = 'translateY(20px)';
          setTimeout(() => {
            question.style.display = 'none';
          }, 300);
        }
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      filterQuestions('');
    });
  </script>
  </section>
</Base>
