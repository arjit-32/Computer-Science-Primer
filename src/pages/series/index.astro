---
import Shape from "@/components/Shape.astro";
import Base from "@/layouts/Base.astro";
import seriesInfo from "@/data/series.json";
import Cta from "@/partials/Cta.astro";
---
<Base title="Series">

  <section class="py-4 bg-gradient-to-br from-white via-pink-50 to-yellow-50">
    <div class="container mx-auto px-4">
      <h2 class="text-2xl md:text-3xl font-bold text-center mb-10 text-zinc-900">Series</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-12 gap-8">
        <div class="md:col-span-4 space-y-6"> 
          <div id="categoryButtons" class="space-y-3">
            {[
              { category: "all", label: "Show All Series", color: "gray" },
              { category: "DSA", label: "Data Structures & Algorithms", color: "purple" },
              { category: "Development", label: "Development", color: "orange" },
              { category: "Development-Plus", label: "Development Plus", color: "red" },
              { category: "Core-CS", label: "Core Computer Science", color: "green" },
              { category: "System-Design", label: "System Design", color: "red" },
              { category: "Product", label: "Product", color: "blue" }
            ].map(({ category, label, color }) => {
              const bgColor = {
                gray: "bg-gray-50 hover:bg-gray-100 text-gray-500",
                purple: "bg-purple-50 hover:bg-purple-100 text-purple-500",
                orange: "bg-orange-50 hover:bg-orange-100 text-orange-500",
                red: "bg-red-50 hover:bg-red-100 text-red-500",
                green: "bg-green-50 hover:bg-green-100 text-green-500",
                blue: "bg-blue-50 hover:bg-blue-100 text-blue-500"
              }[color];
            
              return (
                <button
                  data-category={category}
                  class={`category-btn w-full flex items-center rounded-lg p-3 text-left transition border ${bgColor}`}
                >
                  <span class="mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
                    </svg>
                  </span>
                  <span class="font-medium text-gray-700">{label}</span>
                </button>
              );
            })}
          </div>

          <div id="roadmapContent" class="hidden md:block">
            <p class="text-sm text-gray-500 mb-2 font-semibold">Roadmap</p>
            
            <img
              id="roadmapImage"
              src="/images/categories/5.png"
              alt="Roadmap"
              class="max-w-full h-auto rounded-lg shadow-md object-contain"
            />
          </div>
        </div>

  
        <div class="md:col-span-8">  
          <div id="courseGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
            {Object.entries(seriesInfo).map(([slug, series]) => (
              <a 
                href={`/series/${slug}`} 
                class="course-card group relative bg-white rounded-xl border border-gray-100 shadow-sm hover:shadow-xl transition-all duration-300 overflow-hidden"
                data-category={series.category}
              >
                {series.ongoing == "true" && (
                  <p class="py-1 bg-slate-200 text-zinc-900 text-center text-xs">Ongoing</p>
                )}
                <div class="p-4">
                  <img
                    src={series.image || "/images/collaboration.png"}
                    alt={series.title}
                    class="w-full h-48 object-cover rounded-lg mb-4 group-hover:scale-105 transition-transform duration-300"
                  />

                  <div class="space-x-2 mb-3">
                    <span class="inline-block bg-yellow-200 text-black text-xs font-semibold py-1 px-3 rounded-full">
                      {series.category}
                    </span>
                    <span class="inline-block bg-pink-400 text-white text-xs font-semibold py-1 px-3 rounded-full">
                      {series.time}
                    </span>
                  </div>

                  <h3 class="text-lg font-semibold text-gray-800 group-hover:text-pink-500 transition-colors">
                    {series.title}
                  </h3>
                  <p class="text-gray-600 mt-2 text-sm">{series.subtitle}</p>
                </div>
                <div class="absolute inset-0 bg-gradient-to-br from-pink-400 to-yellow-300 opacity-0 group-hover:opacity-10 transition-opacity duration-300"></div>
              </a>
            ))}
          </div>
        </div>
      </div>
    </div>
  </section>

  <Cta />
</Base>

<!-- JavaScript for Filtering and Roadmap Image Change -->
<script is:inline>
  function initCategoryButtons() {
    const categoryButtons = document.getElementById("categoryButtons");
    const courseGrid = document.getElementById("courseGrid");
    const courseCards = document.querySelectorAll(".course-card");
    const roadmapImage = document.getElementById("roadmapImage");

    if (!categoryButtons || !courseGrid || !roadmapImage) return;

    function filterSeries(category) {
      const existingNoResults = document.getElementById("no-results");
      if (existingNoResults) existingNoResults.remove();

      courseCards.forEach(card => {
        card.classList.add("opacity-0", "scale-95");
        card.style.transition = "opacity 0.3s ease, transform 0.3s ease";
      });

      setTimeout(() => {
        let visibleCount = 0;
        if (category === "all") {
          courseCards.forEach(card => {
            card.style.display = "";
            void card.offsetWidth;
            card.classList.remove("opacity-0", "scale-95");
            visibleCount++;
          });
        } else {
          courseCards.forEach(card => {
            if (card.dataset.category === category) {
              card.style.display = "";
              void card.offsetWidth;
              card.classList.remove("opacity-0", "scale-95");
              visibleCount++;
            } else {
              card.style.display = "none";
            }
          });
        }

        
        const existingNoResults = document.getElementById("no-results");
        if (existingNoResults) existingNoResults.remove();

        if (visibleCount === 0) {
          const noResults = document.createElement("div");
          noResults.id = "no-results";
          noResults.className = "col-span-1 sm:col-span-2 lg:col-span-3 text-center py-10";
          noResults.innerHTML = `
            <p class="text-lg text-gray-600">No series found in the "${category}" category.</p>
            <button id="showAllBtn" class="mt-3 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition">
              Show All Series
            </button>`;
          courseGrid.appendChild(noResults);

          document.getElementById("showAllBtn").addEventListener("click", () => {
            const allButton = document.querySelector('[data-category="all"]');
            if (allButton) allButton.click();
          });
        }

        // Change roadmap image based on category
       // Change roadmap image based on category
    if (category === "DSA") {
      roadmapImage.src = "/images/categories/5.png"; 
    } else if (category === "Development") {
      roadmapImage.src = "/images/categories/1.png"; 
    } else if (category === "Development-Plus") {
      roadmapImage.src = "/images/categories/2.png"; 
    } else if (category === "Core-CS") {
      roadmapImage.src = "/images/categories/4.png"; 
    } else if (category === "System-Design") {
      roadmapImage.src = "/images/categories/6.png"; 
    } else if (category === "Product") {
      roadmapImage.src = "/images/categories/3.png";
    } else {
      roadmapImage.src = "/images/categories/1.png"; 
    }
      }, 300);
    }

    categoryButtons.addEventListener("click", (event) => {
      const button = event.target.closest(".category-btn");
      if (!button) return;

      document.querySelectorAll(".category-btn").forEach(btn => {
        btn.classList.remove("border-2", "border-blue-500");
      });

      button.classList.add("border-2", "border-blue-500");

      const category = button.dataset.category;
      filterSeries(category);
    });

    const defaultButton = document.querySelector('[data-category="all"]');
    if (defaultButton) defaultButton.click();

    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get("category");
    if (categoryParam) {
      const categoryButton = document.querySelector(`[data-category="${categoryParam}"]`);
      if (categoryButton) categoryButton.click();
    }
  }

  document.addEventListener("astro:page-load", initCategoryButtons);
  document.addEventListener("astro:after-swap", initCategoryButtons);
  window.addEventListener("load", initCategoryButtons);
</script>
