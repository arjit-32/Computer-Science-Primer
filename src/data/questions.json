[   
    {
        "id": 1,
        "tags": ["nodejs"],
        "question": "What do you mean by \"Node.js is a JavaScript runtime\"? ",
        "answer": ["- Historically, JavaScript only ran in browsers and was limited to DOM manipulation and event handling.","- Node.js allows JavaScript to run outside the browser using chrome’s V8 engine", "- It provides an environment where JS can interact with the system, making it usable for backend development.","- It allows JavaScript to handle backend tasks that were traditionally handled by languages like Java or Python."]
    },
    {
        "id": 2,
        "tags": ["javascript"],
        "question": "Role of Javascript in development of web ?",
        "answer": ["- In early 90s there were only static pages on web.", "- Then for client side scripting ( dynamic frontend ), javascript was introduced.", "- This led to development of JS engines like SpiderMonkey, V8 etc", "- These engines allows browsers to execute javascript code. ", "- Early adopters of Javascript’s features were eBay, Yahoo, Amazon etc", "- Different engines may support different versions of ECMAScript"]
    },
    {
        "id": 3,
        "tags": ["javascript"],
        "question": "Is V8  just a JavaScript compiler? How do they compare to C and Java?",
        "answer": ["Its a complete runtime environment. It compiles frequently used code for speed, interpret the rest, and manage memory automatically, handling JS's dynamic nature efficiently.", "While C is compiled ahead-of-time into machine code. Java is compiled to bytecode, then JVM uses JIT to compile that to machine code. In V8, JS is directly JIT compiled to machine code at runtime instead of any intermediary code."]
    },
    {
        "id": 4,
        "tags": ["nodejs"],
        "question": "❓ What is the Node.js event loop?",
        "answer": ["- Node.js uses an event loop to manage asynchronous tasks while staying single-threaded.", "- It handles tasks like file I/O & API calls outside the main thread, running callbacks only when the main thread is free.", "Example - ", "Sync tasks(start,end) run first => Async task(Timeout) placed in Queue => After 1 sec event loop checks & executes callback. "],
        "code": "console.log(\"start\"); \nsetTimeout(() => console.log(\"Timeout\"), 1000); \nconsole.log(\"end\");"
    },
    {
        "id": 5,
        "tags": ["nodejs"],
        "question": "📦 What is package.json in Node.js?",
        "answer": ["File that manager our project, It is automatically created when we do npm init. It has - ", "- Project Metadata: Contains name, version, description.","- Dependency Management: Lists required packages.","- Script Commands: Defines npm scripts for automation (e.g., start, test).","- Version Control: Ensures consistent package versions across environments.","- Configuration: Stores settings for tools & libraries."]
    },
    {
        "id": 6,
        "tags": ["nodejs"],
        "question": "🚀 What is npm in Node.js?",
        "answer": ["A package manager/ tool to manage dependencies, scripts and libraries in Node.js project. It allows to include 3rd party code. It is comparable to pip in python and maven in java."]
    },
    {
        "id": 7,
        "tags": ["nodejs"],
        "question": "❓What is a Module System in Node.js? ",
        "answer": ["Module is reusable code. A module system is used to organize code in seperate functionalities.", "Types of Module System - ", "1️⃣ CommonJs- Default Module system in nodejs. It uses require() to import and module.exports. Synchronously loaded.", "2️⃣ Ecmascript Modules(ESM)- New standard introduced in ES6. It uses import and export syntax and is asynchronously loaded.", "Note - ESM is now supported in nodejs with .mjs extension or enabling in package.json"]
    },
    {
        "id": 8,
        "tags": ["nodejs"],
        "question": "🔔 What is EventEmitter in Node.js?",
        "answer": ["It is part of the core events module, enabling objects to communicate via events (async)", "It is used in many core modules like (http, fs etc).", "It can be used for event-driven architecture!"],
        "code": "const EventEmitter = require('events');\nconst eventEmitter = new EventEmitter();\n\n// Register an event listener\neventEmitter.on('greet', () => {\n  console.log('Hello, world!');\n});\n\n// Emit the event\neventEmitter.emit('greet');"
    }, 
    {
        "id": 9,
        "tags": ["nodejs"],
        "question": "📂 How Node.js handles file operations?",
        "answer": ["It uses the fs module for working with the file system.", "Use case - When a user requests a file (e.g., an image or document), Node.js reads the file asynchronously, allowing the server to handle other requests.", "Asynchronous I/O prevents blocking other requests!", "There is another method readFileSync which reads file synchronously."],
        "code": "const fs = require('fs');\n\napp.get('/file', (req, res) => {\n  fs.readFile('file.txt', 'utf8', (err, data) => {\n    if (err) res.status(500).send('Error reading file');\n    res.send(data);\n  });\n});"
    },
    {
        "id": 10,
        "tags": ["nodejs"],
        "question": "💡 What are Streams in Node.js?",
        "answer": ["Streams handle I/O efficiently by processing data in chunks instead of loading it all at once. Ideal for large files or real-time data. Types of Stream -", "1. Readable: For reading data", "2. Writable: For writing data","3. Duplex: Both read & write","4. Transform: Modify data while reading/writing","It is perfect for video streaming, file handling, or large datasets! Below is example of using Streams for File Handling."],
        "code": "const fs = require('fs');\n\nconst readStream = fs.createReadStream('largefile.txt');\n\nreadStream.on('data', (chunk) => {\n  console.log(`Received ${chunk.length} bytes of data.`);\n});\n\nreadStream.on('end', () => {\n  console.log('Finished reading the file.');\n});"
    },
    {
        "id": 11,
        "tags": ["nodejs"],
        "question": "💡 What are Callbacks in Node.js?",
        "answer": ["Callbacks are functions passed as argument to another function and gets executed after the main func has completed its task. In node.js they are crucial for non-blocking behaviour, callbacks are passed to handle async tasks.", "How it works ? The async task starts → Node.js keeps working → When done, the event loop triggers the callback to handle the result."],
         "code": "fs.readFile('file.txt', 'utf8', (err, data) => {\n  if (err) console.error(err);\n  else console.log(data);\n});"
    },
    {
        "id": 12,
        "tags": ["nodejs"],
        "question": "💡What are process.nextTick() & setImmediate() in Node.js?",
        "answer": ["1️⃣ process.nextTick() - Executes before the next event loop. Great for immediate logic after a task, like error handling or cleanup.","2️⃣ setImmediate() - Executes after I/O events in the event loop. Useful for deferred tasks that shouldn’t block the current cycle."],
        "images": ["images/interview-ques/ques12(1).jpg", "images/interview-ques/ques12(2).jpg"]
    },
    {
        "id": 13,
        "tags": ["general"],
        "question": "🔍 What is Encoding?",
        "answer": ["1️⃣ Text Encoding: (UTF-8, ASCII) Converts characters into bytes so computers can store and display text.","2️⃣ Binary: Raw 0s & 1s, the language of computers.","3️⃣ Base64: Converts binary data( images, files) to text for safe web/email transmission.","4️⃣ URL Encoding: Handles special characters in URLs (%20 for spaces).","5️⃣ Hex: Easier-to-read format for binary (0-9, A-F)."]
    },
    {
        "id": 14,
        "tags": ["nodejs"],
        "question": "💡 What is the Buffer class in Node.js?",
        "answer": ["It is a global object which handles raw binary data in memory (Space is allocated in RAM) allowing us to manipulate raw data streams efficiently","It is great for file I/O and Network communications","Example - Reading a binary file using buffer. fs.readFile reads binary data from file & saves in buffer. Buffer.toString(‘base64’) is used to convert raw binary data to base64"],
         "code": "const fs = require('fs');\n\n// Read a binary file (like an image) as a buffer\nfs.readFile('image.png', (err, data) => {\n  if (err) throw err;\n\n  // `data` is a Buffer containing the binary content of the file\n  console.log('Original Buffer:', data);\n\n  // Convert the Buffer to a string in base64 encoding\n  // Useful when we want to send it over a network\n  const base64Data = data.toString('base64');\n  console.log('Base64 Encoded Data:', base64Data);\n});"
    },
    {
        "id": 15,
        "tags": ["expressjs"],
        "question": "🚀 What is Express.js and why is it required?",
        "answer": ["Its a minimal, flexible web framework for Node.js. It simplifies tasks like routing, handling requests/responses, and managing middleware.","It -> Reduces boilerplate code, Makes server-side dev fast & clean, Supports middleware, Simplifies Routing, Handles HTTP Methods, Serves Static Files, Supports Templating Engines and has Good Error Handling","Alternatives to Express - Koa.js, Fastify.js ( flexible & modern) , Hapi.js ( More config )"],
         "code": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => res.send('Hello, Express!'));\n\napp.listen(3000, () => console.log('Server running on port 3000'));"
    },
    {
        "id": 16,
        "tags": ["expressjs"],
        "question": "🙋 What is middleware in Express.js?",
        "answer": ["It is a function that executes during request-response cycle in express","Can use built-in, 3rd party or custom middlewares.", "Used for tasks like logging, authentication, and parsing data."],
        "code": "app.use((req, res, next) => {\n  console.log('Request Type:', req.method);\n  next(); // Move to the next middleware or route handler\n});"
    },
    {
        "id": 17,
        "tags": ["expressjs"],
        "question": "🧭 What is routing in Express.js?",
        "answer": ["It defines how an app responds to client requests at specific URL paths and HTTP methods (GET, POST, etc.). Its how you handle different actions (e.g. displaying data, creating resources) based on the URL.", "How routing works in Express - ", "- Express supports all HTTP methods.", "- Dynamic routes with parameters (e.g., /user/:id).", "- Multiple handlers per route!"],
        "code": "app.get('/users', (req, res) => {\n  res.send('User list');\n});\n\napp.post('/users', (req, res) => {\n  res.send('Create new user');\n});"
    },
    {
        "id": 18,
        "tags": ["expressjs"],
        "question": "🧭 What are route parameters in Express.js?",
        "answer": ["Route parameters allow you to capture values from the URL. They are placeholders in the route definition (e.g., /user/:id).", "Useful when u want to create dynamic routes that respond differently based on values in URL.","How route parameters work:","- Parameters are prefixed with : in the route path.","- You can access them using req.params inside your route handler."],
        "code": "app.get('/user/:id', (req, res) => {\n  const userId = req.params.id;\n  res.send(`User ID is ${userId}`);\n});"
    },
    {
        "id": 19,
        "tags": ["expressjs"],
        "question": "❓What are query parameters in Express.js?",
        "answer": ["Query parameters are part of the URL that come after the question mark (?) and are used to send data as key-value pairs.","Can be accessed using req.query.","Example - /search?name=phone&category=electronics"],
        "code": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const name = req.query.name;\n  const category = req.query.category;\n  res.send(`Searching for ${name} in the ${category} category`);\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
    },
    {
        "id": 20,
        "tags": ["expressjs"],
        "question": "📋 Difference between res.send(), res.json(), and res.end() in Express.js?",
        "answer": ["- res.send(): It sends various types. Automatically detects and sets Content-Type header. It auto-ends response.", "- res.json(): Sends JSON response with correct headers. It also sets Content-Type to application/json.", "res.end(): Ends response without sending data (unless specified)."]
    },
    {
        "id": 21,
        "tags": ["expressjs"],
        "question": "☠️ Handling errors in Express.js ?",
        "answer": ["- Define error-handling middleware with 4 args: (err, req, res, next)", "- Use next(err) to pass errors to the handler.", "- For async errors, use try/catch and pass errors to next()."],
         "code": "app.get('/', (req, res, next) => {\n  try {\n    throw new Error('Something went wrong!');\n  } catch (err) {\n    next(err); // Pass error to error-handling middleware\n  }\n});\n\napp.use((err, req, res, next) => {\n  console.error(err.message);\n  res.status(500).send('Internal Server Error');\n});"
    },
    {
        "id": 22,
        "tags": ["expressjs"],
        "question": "📁How to serve static files in Express.js ?  ",
        "answer": ["- Use express.static('folder') to serve HTML, CSS, images, etc.", "- For multiple directories, use express.static() multiple times. ", "- Can also add a virtual path prefix for custom routes."],
        "code": "// Serves from the 'public' folder\napp.use(express.static('public'));\n\n// Can serve static files from multiple folders\napp.use(express.static('public'));\napp.use(express.static('assets'));\n\n// Access via website.com/static/file.css, instead of website.com/file.css\napp.use('/static', express.static('public'));"
    }
  ]
  