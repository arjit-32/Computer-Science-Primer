---
// Import questions data at the Astro component level
import questions from '../../data/questions.json'; 
const totalQuestions = questions.length;
---

<!-- Modal Button -->
<button 
  class="fixed bottom-6 right-6 bg-blue-600 text-white rounded-full p-3 border-none cursor-pointer shadow-md transition-all duration-200 hover:scale-105 hover:bg-blue-700 flex items-center justify-center z-40"
  id="questionBtn" 
  aria-label="Open interview questions"
>
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="12" cy="12" r="10"/>
    <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/>
    <line x1="12" y1="17" x2="12.01" y2="17"/>
  </svg>
</button>

<!-- Modal Dialog -->
<div class="fixed inset-0 bg-black/50 z-50 p-6 hidden items-end justify-end" id="modalOverlay">
  <div class="bg-white rounded-lg shadow-xl w-full max-w-[28rem] max-h-[80vh] flex flex-col animate-[slideUp_0.3s_ease-out]">
    <div class="bg-[#fee140] text-black p-3 rounded-t-lg flex justify-between items-center">
      <div id="questionCounter">Question 1/{totalQuestions}</div>
      <button class="p-1 hover:opacity-80" id="closeBtn" aria-label="Close modal">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"/>
          <line x1="6" y1="6" x2="18" y2="18"/>
        </svg>
      </button>
    </div>

    <div class="flex-1 overflow-y-auto p-4" id="modalContent">
      <!-- Content will be dynamically inserted here -->
    </div>

    <div class="p-4 border-t border-gray-200 flex justify-between items-center">
      <button 
        class="flex items-center gap-2 px-4 py-2 rounded-lg text-blue-600 hover:bg-blue-50 disabled:text-gray-400 disabled:cursor-not-allowed disabled:hover:bg-transparent transition-colors duration-200" 
        id="prevBtn"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"/>
        </svg>
        Previous
      </button>
      <button 
        class="flex items-center gap-2 px-4 py-2 rounded-lg text-blue-600 hover:bg-blue-50 disabled:text-gray-400 disabled:cursor-not-allowed disabled:hover:bg-transparent transition-colors duration-200" 
        id="nextBtn"
      >
        Next
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 18 15 12 9 6"/>
        </svg>
      </button>
    </div>
  </div>
</div>

<script define:vars={{ questions, totalQuestions }}>
  let currentQuestionIndex = 0;
  let modalInitialized = false;

  function renderQuestion() {
    const modalContent = document.getElementById('modalContent');
    const questionCounter = document.getElementById('questionCounter');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    if (!modalContent || !questionCounter || !prevBtn || !nextBtn) return;

    const question = questions[currentQuestionIndex];
    if (!question) return;

    questionCounter.textContent = `Question ${currentQuestionIndex + 1}/${totalQuestions}`;

    const content = `
      <h3 class="text-xl mb-3">${question.question}</h3>
      <div class="flex flex-wrap gap-2 mb-2">
        ${question.tags.map(tag => `<span class="bg-[#fa709a] text-white p-1 rounded text-xs">${tag}</span>`).join('')}
      </div>
      ${Array.isArray(question.answer) 
        ? question.answer.map(paragraph => `<p class="mb-4 text-base">${paragraph}</p>`).join('')
        : `<p class="mb-4 text-base">${question.answer}</p>`
      }
      ${question.code ? `<pre class="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto font-mono my-4 whitespace-pre-wrap">${question.code}</pre>` : ''}
      ${question.images ? question.images.map(img => `<img class="w-full rounded-lg mt-4" src="/${img}" alt="Question illustration" loading="lazy" />`).join('') : ''}
    `;

    modalContent.innerHTML = content;

    prevBtn.disabled = currentQuestionIndex === 0;
    nextBtn.disabled = currentQuestionIndex === totalQuestions - 1;
  }

  function initializeModal() {
    if (modalInitialized) return;

    const questionBtn = document.getElementById('questionBtn');
    const modalOverlay = document.getElementById('modalOverlay');
    const closeBtn = document.getElementById('closeBtn');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');

    if (!questionBtn || !modalOverlay || !closeBtn || !prevBtn || !nextBtn) return;

    questionBtn.addEventListener('click', () => {
      modalOverlay.classList.remove('hidden');
      modalOverlay.classList.add('flex');
      renderQuestion();
    });

    closeBtn.addEventListener('click', () => {
      modalOverlay.classList.remove('flex');
      modalOverlay.classList.add('hidden');
    });

    modalOverlay.addEventListener('click', (e) => {
      if (e.target === modalOverlay) {
        modalOverlay.classList.remove('flex');
        modalOverlay.classList.add('hidden');
      }
    });

    prevBtn.addEventListener('click', () => {
      if (currentQuestionIndex > 0) {
        currentQuestionIndex--;
        renderQuestion();
      }
    });

    nextBtn.addEventListener('click', () => {
      if (currentQuestionIndex < totalQuestions - 1) {
        currentQuestionIndex++;
        renderQuestion();
      }
    });

    document.addEventListener('keydown', (e) => {
      if (!modalOverlay.classList.contains('flex')) return;

      switch (e.key) {
        case 'Escape':
          modalOverlay.classList.remove('flex');
          modalOverlay.classList.add('hidden');
          break;
        case 'ArrowLeft':
          if (currentQuestionIndex > 0) {
            currentQuestionIndex--;
            renderQuestion();
          }
          break;
        case 'ArrowRight':
          if (currentQuestionIndex < totalQuestions - 1) {
            currentQuestionIndex++;
            renderQuestion();
          }
          break;
      }
    });

    modalInitialized = true;
  }

  document.addEventListener('astro:page-load', () => {
    currentQuestionIndex = 0;
    modalInitialized = false;
    initializeModal();
  });

  document.addEventListener('astro:before-preparation', () => {
    modalInitialized = false;
  });

  initializeModal();
</script>

<style>
  @keyframes slideUp {
    from {
      transform: translateY(100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
</style>