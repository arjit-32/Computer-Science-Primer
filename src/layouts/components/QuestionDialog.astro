---
// Import questions from data folder
import questions from '../../data/questions.json';
const totalQuestions = questions.length;
---

<style>
  .modal-button {
    position: fixed;
    bottom: 24px;
    right: 24px;
    background-color: #2563eb;
    color: white;
    border-radius: 9999px;
    padding: 12px;
    border: none;
    cursor: pointer;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
    transition: all 200ms;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 40;
  }

  .modal-button:hover {
    transform: scale(1.05);
    background-color: #1d4ed8;
  }

  .modal-overlay {
    display: none;
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 50;
    padding: 24px;
  }

  .modal-overlay.open {
    display: flex;
    align-items: flex-end;
    justify-content: flex-end;
  }

  .modal-container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1);
    width: 100%;
    max-width: 28rem;
    max-height: 80vh;
    display: flex;
    flex-direction: column;
    animation: slide-up 0.3s ease-out;
  }

  @keyframes slide-up {
    from {
      transform: translateY(100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .modal-header {
    background-color: #2563eb;
    color: white;
    padding: 16px;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .modal-content {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
  }

  .question-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 8px;
  }

  .tags-container {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    margin-bottom: 12px;
  }

  .tag {
    background-color: #dbeafe;
    color: #1e40af;
    padding: 4px 8px;
    border-radius: 9999px;
    font-size: 0.875rem;
  }

  .answer-text {
    color: #374151;
    margin-bottom: 12px;
    line-height: 1.6;
  }

  .code-block {
    background-color: #111827;
    color: #f3f4f6;
    padding: 16px;
    border-radius: 8px;
    overflow-x: auto;
    font-family: monospace;
    margin: 16px 0;
    white-space: pre-wrap;
  }

  .question-image {
    width: 100%;
    border-radius: 8px;
    margin-top: 16px;
  }

  .navigation {
    padding: 16px;
    border-top: 1px solid #e5e7eb;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .nav-button {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    color: #2563eb;
    background: transparent;
    transition: background-color 200ms;
  }

  .nav-button:hover:not(:disabled) {
    background-color: #dbeafe;
  }

  .nav-button:disabled {
    color: #9ca3af;
    cursor: not-allowed;
  }

  .close-button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 4px;
  }

  .close-button:hover {
    opacity: 0.8;
  }
</style>

<!-- Question Button -->
<button class="modal-button" id="questionBtn" aria-label="Open interview questions">
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="12" cy="12" r="10"/>
    <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/>
    <line x1="12" y1="17" x2="12.01" y2="17"/>
  </svg>
</button>

<!-- Modal Dialog -->
<div class="modal-overlay" id="modalOverlay">
  <div class="modal-container">
    <div class="modal-header">
      <div id="questionCounter">Question 1/{totalQuestions}</div>
      <button class="close-button" id="closeBtn" aria-label="Close modal">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"/>
          <line x1="6" y1="6" x2="18" y2="18"/>
        </svg>
      </button>
    </div>

    <div class="modal-content" id="modalContent">
      <!-- Content will be dynamically inserted here -->
    </div>

    <div class="navigation">
      <button class="nav-button" id="prevBtn">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"/>
        </svg>
        Previous
      </button>
      <button class="nav-button" id="nextBtn">
        Next
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 18 15 12 9 6"/>
        </svg>
      </button>
    </div>
  </div>
</div>

<script define:vars={{ questions, totalQuestions }}>
  let currentQuestionIndex = 0;

  // Get DOM elements
  const questionBtn = document.getElementById('questionBtn');
  const modalOverlay = document.getElementById('modalOverlay');
  const closeBtn = document.getElementById('closeBtn');
  const modalContent = document.getElementById('modalContent');
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');
  const questionCounter = document.getElementById('questionCounter');

  // Function to render current question
  function renderQuestion() {
    const question = questions[currentQuestionIndex];
    questionCounter.textContent = `Question ${currentQuestionIndex + 1}/${totalQuestions}`;

    const content = `
      <h3 class="question-title">${question.question}</h3>
      <div class="tags-container">
        ${question.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
      </div>
      ${Array.isArray(question.answer) 
        ? question.answer.map(paragraph => `<p class="answer-text">${paragraph}</p>`).join('')
        : `<p class="answer-text">${question.answer}</p>`
      }
      ${question.code ? `<pre class="code-block"><code>${question.code}</code></pre>` : ''}
      ${question.images ? question.images.map(img => `<img class="question-image" src="/${img}" alt="Question illustration" />`).join('') : ''}
    `;

    modalContent.innerHTML = content;

    // Update navigation buttons
    prevBtn.disabled = currentQuestionIndex === 0;
    nextBtn.disabled = currentQuestionIndex === totalQuestions - 1;
  }

  // Event Listeners
  questionBtn.addEventListener('click', () => {
    modalOverlay.classList.add('open');
    renderQuestion();
  });

  closeBtn.addEventListener('click', () => {
    modalOverlay.classList.remove('open');
  });

  prevBtn.addEventListener('click', () => {
    if (currentQuestionIndex > 0) {
      currentQuestionIndex--;
      renderQuestion();
    }
  });

  nextBtn.addEventListener('click', () => {
    if (currentQuestionIndex < totalQuestions - 1) {
      currentQuestionIndex++;
      renderQuestion();
    }
  });

  // Close modal when clicking outside
  modalOverlay.addEventListener('click', (e) => {
    if (e.target === modalOverlay) {
      modalOverlay.classList.remove('open');
    }
  });

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (!modalOverlay.classList.contains('open')) return;

    switch (e.key) {
      case 'Escape':
        modalOverlay.classList.remove('open');
        break;
      case 'ArrowLeft':
        if (!prevBtn.disabled) prevBtn.click();
        break;
      case 'ArrowRight':
        if (!nextBtn.disabled) nextBtn.click();
        break;
    }
  });
</script>