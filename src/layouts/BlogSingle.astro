---
import readingTime from "@/lib/utils/readingTime";
import seriesInfo from "@/data/series.json";
import { humanize, slugify } from "@/lib/utils/textConverter";
import {
  FaRegClock,
  FaRegFolder,
  FaRegUserCircle,
} from "react-icons/fa";
import { Image } from "astro:assets";

const { post, series } = Astro.props;
const { Content } = await post.render();

const courseData = seriesInfo[series];
---

<section class="section blog-single py-4 bg-white border-b pb-20">
  <div class="container max-w-6xl mx-auto px-4 sm:px-6">
    <div class="flex flex-col lg:flex-row gap-8">
      
      <!-- Navigation Sidebar - Hidden on mobile, visible on lg screens -->
      {courseData && courseData.navbar.length > 0 && (
        <div class="hidden lg:block w-64 shrink-0">
          <div class="sticky top-20 space-y-3">
            {courseData.navbar.map((section, index) => (
              <div class="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden">
                <button
                  class="w-full flex items-center justify-between p-3 hover:bg-gray-50 transition-colors cursor-pointer group"
                  id={`nav-button-${index}`}
                >
                  <div class="flex items-center gap-2">
                    <span class="flex items-center justify-center w-7 h-7 rounded-full bg-[#fb7299]/10 text-[#fb7299] font-medium text-sm">
                      {index + 1}
                    </span>
                    <span class="font-semibold text-gray-900 text-sm group-hover:text-[#fb7299] transition-colors">
                      {section.subheading}
                    </span>
                  </div>
                  <svg 
                    class="w-4 h-4 text-gray-400 transform transition-transform duration-200" 
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
                
                <div
                  class="hidden border-t border-gray-100"
                  id={`nav-content-${index}`}
                >
                  <div class="p-3 space-y-1">
                    {section.link.map((link) => (
                      <a
                        href={link.type != "articles" ? link.url : `/articles/${link.url}`}
                        target={link.type != "articles" ? "_blank" : "_self"}
                        class="flex items-center gap-2 p-2 rounded-md hover:bg-gray-50 transition-colors group text-sm"
                      >
                        {/* YouTube Icon */}
                        {link.type === "youtube" && (
                          <svg class="w-4 h-4 shrink-0 text-red-600" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"/>
                          </svg>
                        )}
                        
                        {/* Book Icon */}
                        {link.type === "book" && (
                          <svg class="w-4 h-4 shrink-0 text-blue-700" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M6 2C4.895 2 4 2.895 4 4V20C4 21.105 4.895 22 6 22H18C19.105 22 20 21.105 20 20V4C20 2.895 19.105 2 18 2H6ZM6 4H18V20H6V4ZM8 6H16V8H8V6ZM8 10H16V12H8V10ZM8 14H13V16H8V14Z"/>
                          </svg>
                        )}
                        
                        {/* External Link Icon */}
                        {link.type === "external" && (
                          <svg class="w-4 h-4 shrink-0 text-blue-500" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                          </svg>
                        )}
                        
                        {/* Assignment Icon */}
                        {link.type === "assignment" && (
                          <svg class="w-4 h-4 shrink-0 text-orange-500" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                          </svg>
                        )}
                        
                        {/* GitHub Icon */}
                        {link.type === "github" && (
                          <svg class="w-4 h-4 shrink-0 text-gray-900" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                          </svg>
                        )}
                        
                        {/* Default Document Icon */}
                        {!["youtube", "book", "external", "assignment", "github"].includes(link.type) && (
                          <svg class="w-4 h-4 shrink-0 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                        )}
                        
                        <span class="text-gray-700 group-hover:text-[#fb7299] transition-colors">
                          {link.title}
                        </span>
                        
                        {link.type != "articles" && (
                          <svg class="w-3 h-3 shrink-0 text-gray-400 ml-auto" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                          </svg>
                        )}
                      </a>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      <!-- Main Content -->
      <div class="flex-1">
        <div class={`${courseData ? '' : 'flex justify-center'}`}>
          <div class={`${courseData ? 'w-full' : 'max-w-[720px]'}`}>
            {post.data.image && (
              <div class="mb-6 overflow-hidden rounded-lg">
                <Image
                  class="w-full h-full"
                  src={post.data.image}
                  alt={post.data.title || "Blog post image"}
                  width={800}
                  height={450}
                  loading="eager"
                />
              </div>
            )}

            <h1 class="text-3xl font-bold leading-tight mb-4">{post.data.title}</h1>
            
            <div class="mb-6 flex flex-wrap items-center text-sm text-gray-600">
              {courseData && courseData.navbar.length > 0 && (
              <div class="flex items-center mr-4 mb-2">
                <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
                <a
                  href={`/series/${series}`}
                  class="text-sm text-[#fb7299] font-semibold hover:underline"
                >
                  Back to {humanize(courseData?.title || series)}
                </a>
              </div>
              )}

              <div class="flex items-center mr-4 mb-2">
                <FaRegUserCircle className={"mr-1"} />
                <a 
                  href="https://arjit-32.github.io" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="text-gray-700 hover:text-[#fb7299] transition-colors"
                >
                  {humanize(post.data.author)}
                </a>
              </div>

              
              <div class="flex items-center mr-4 mb-2">
                <FaRegClock className={"mr-1"} />
                <span>{readingTime(post.body)}</span>
              </div>
              
             
              
            </div>
            
            <div class="content prose max-w-none prose-headings:text-2xl">
              <Content />
            </div>
          
            {courseData && courseData.navbar.length > 0 && (() => {
              const flatArticles = courseData.navbar
                .flatMap(section => section.link)
                .filter(link => link.type === "articles")
                .map(link => link.url);
            
              const currentSlug = post.slug || post.data.slug || "";
              const currentIndex = flatArticles.indexOf(currentSlug);
            
              const prevSlug = currentIndex > 0 ? flatArticles[currentIndex - 1] : null;
              const nextSlug = currentIndex < flatArticles.length - 1 ? flatArticles[currentIndex + 1] : null;
            
              return (
                <div class="mt-10 flex justify-between pt-6 text-sm font-medium text-[#fb7299]">
                  <div>
                    {prevSlug && (
                      <a
                        href={`/articles/${prevSlug}`}
                        class="inline-flex items-center hover:underline"
                      >
                        ← Previous
                      </a>
                    )}
                  </div>
                  <div class="ml-auto">
                    {nextSlug && (
                      <a
                        href={`/articles/${nextSlug}`}
                        class="inline-flex items-center hover:underline"
                      >
                        Next →
                      </a>
                    )}
                  </div>
                </div>
              );
            })()}

            
            
            
            
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script is:inline>
  function initNavHandlers() {
    setTimeout(() => { // Ensure elements exist before attaching handlers
      document.querySelectorAll('[id^="nav-button-"]').forEach((button) => {
        button.removeEventListener("click", toggleNav);
        button.addEventListener("click", toggleNav);
      });
    }, 100); // Slight delay to ensure DOM is ready
  }

  function toggleNav(event) {
    const button = event.currentTarget;
    const index = button.id.split("-").pop();
    const content = document.getElementById(`nav-content-${index}`);
    const icon = button.querySelector(".transform");

    if (content) {
      content.classList.toggle("hidden");
    }
    if (icon) {
      icon.classList.toggle("rotate-180");
    }
  }

  // Attach handlers on Astro events
  document.addEventListener("astro:page-load", initNavHandlers); // Ensures handlers work on first load
  document.addEventListener("astro:after-swap", initNavHandlers); // Handles dynamic navigation
  window.addEventListener("load", initNavHandlers); // Ensures handlers attach even if Astro fails
</script>